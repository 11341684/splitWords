!function(Q,C){"object"==typeof exports&&"object"==typeof module?module.exports=C():"function"==typeof define&&define.amd?define([],C):"object"==typeof exports?exports.GIS=C():Q.GIS=C()}(this,function(){return function(Q){function C(F){if(I[F])return I[F].exports;var g=I[F]={exports:{},id:F,loaded:!1};return Q[F].call(g.exports,g,g.exports,C),g.loaded=!0,g.exports}var I={};return C.m=Q,C.c=I,C.p="/assets/",C(0)}({0:function(module,exports,__webpack_require__){eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.index = undefined;\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); //import Library from './addressLibrary';\n\n\nvar _util = __webpack_require__(108);\n\nvar _util2 = _interopRequireDefault(_util);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Library = {};\nvar ROOTCODE = '0';\nvar order = ['country', 'province', 'city', 'district', 'town', 'address'];\nvar stopLevel = 4;\nvar orderRegExp = [null, /(省|市|(壮族|回族|维吾尔族?)?自治区|特别行政区)((?=,)|$)/g, /(市|自治县|自治州|地区)((?=,)|$)/g, /(自治县|[县区市])((?=,)|$)/g, /(街道办|街道办事处|地区办事处|乡|镇|街道|办事处)((?=,)|$)/g];\n\nvar Dispatcher = function () {\n    function Dispatcher(option) {\n        _classCallCheck(this, Dispatcher);\n\n        this.basePrefix = _util2.default.getId();\n\n        this.id = option.id || '';\n    }\n\n    _createClass(Dispatcher, [{\n        key: 'on',\n        value: function on(type, callback, once, stop) {\n            return Dispatcher.on(type, this.id, callback, once, stop);\n        }\n    }, {\n        key: 'emit',\n        value: function emit(type, data) {\n            return Dispatcher.emit(type, data, this.id, this);\n        }\n    }, {\n        key: 'off',\n        value: function off(type, callback) {\n            return Dispatcher.off(type, this.id, callback);\n        }\n    }, {\n        key: 'once',\n        value: function once(type, name, callback, stop) {\n            return Dispatcher.once(type, this.id, callback, stop);\n        }\n    }, {\n        key: 'onByObject',\n        value: function onByObject(option) {\n            var clipping = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n            if (!_util2.default.isObject(option)) return false;\n            for (var key in option) {\n                if (!option.hasOwnProperty(key)) continue;\n                if (_util2.default.isFunction(option[key])) {\n                    this.on(key, option[key]);\n                    if (clipping) {\n                        delete option[key];\n                    }\n                } else if (_util2.default.isObject(option[key])) {\n                    this.onByObject(option[key], clipping);\n                }\n            }\n        }\n    }], [{\n        key: 'once',\n        value: function once(type, name, callback, stop) {\n            return Dispatcher.on(type, name, callback, true, stop);\n        }\n    }, {\n        key: 'on',\n        value: function on(type, name, callback) {\n            var once = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n            var stop = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n\n            var opt = type;\n            var $events = Dispatcher.eventPool;\n            if (typeof type === 'string') {\n                opt = {};\n                opt.type = type;\n                if (typeof name === 'string' || _util2.default.isFunction(callback)) {\n                    opt.name = name;\n                    opt.callback = callback;\n                } else {\n                    opt.callback = name;\n                }\n                opt.once = once;\n                opt.stop = stop;\n            }\n            if (!_util2.default.isFunction(opt.callback)) return false;\n            if (!opt.type || typeof opt.type !== 'string') return false;\n            opt.async = opt.type.split('!').length > 1;\n            for (var i = 0, len = $events.length; i < len; i++) {\n                if (opt.name && $events[i].name && opt.name === $events[i].name && opt.type === $events[i].type) {\n                    return false;\n                }\n            }\n            $events.push(opt);\n            return true;\n        }\n    }, {\n        key: 'emit',\n        value: function emit(type, data, name, scope) {\n            scope = scope || this;\n            var $events = Dispatcher.eventPool;\n            var number = 0;\n\n            var _loop = function _loop(i, len) {\n                var currentEvent = $events[i];\n                if (type && type === currentEvent.type) {\n                    if (!(name && currentEvent.name && currentEvent.name !== name)) {\n                        number++;\n                        currentEvent.callback.call(scope || {}, data);\n                        if (currentEvent.once === true) {\n                            setTimeout(function () {\n                                Dispatcher.off(currentEvent.type, currentEvent.name, currentEvent.callback);\n                            }, 0);\n                        }\n                        if (currentEvent.stop === false && currentEvent.name) {\n                            var eventNames = currentEvent.name.split('.');\n                            if (eventNames.length > 1) {\n                                for (var j = 0; j < eventNames.length; j++) {\n                                    var _eventNames = eventNames;\n                                    _eventNames.splice(eventNames.length - 1 - j, j + 1);\n                                    if (Dispatcher.emit(type, data, _eventNames.join('.'), scope) !== 0) {\n                                        break;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            };\n\n            for (var i = 0, len = $events.length; i < len; i++) {\n                _loop(i, len);\n            }\n            return number;\n        }\n    }, {\n        key: 'off',\n        value: function off(type, name, callback) {\n            var number = 0;\n            if (arguments.length === 0) {\n                number = Dispatcher.eventPool.length;\n                Dispatcher.eventPool = [];\n                return number;\n            }\n            var opt = type;\n            var $events = Dispatcher.eventPool;\n            if (typeof type === 'string') {\n                opt = {};\n                opt.type = type;\n                if (typeof name === 'string' || callback) {\n                    opt.name = name;\n                    opt.callback = callback;\n                } else {\n                    opt.callback = name;\n                }\n            }\n            for (var i = 0; i < $events.length; i++) {\n                if (!(opt.name && $events[i].name && opt.name !== $events[i].name || opt.type && $events[i].type && opt.type !== $events[i].type)) {\n                    if (!opt.callback || opt.callback === $events[i].callback) {\n                        number++;\n                        $events.splice(i, 1);\n                        i--;\n                    }\n                }\n            }\n            Dispatcher.eventPool = $events;\n            return number;\n        }\n    }, {\n        key: 'publish',\n        value: function publish() {}\n    }]);\n\n    return Dispatcher;\n}();\n\nDispatcher.eventPool = [];\nDispatcher.joiner = '-';\n\nvar CityModel = function () {\n    function CityModel() {\n        var option = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        _classCallCheck(this, CityModel);\n\n        //编码\n        this.code = option.code;\n        //重点子城市\n        this.childrenNode = [];\n        //父级\n        this.parent = option.parent;\n        //层\n        this.level = option.level;\n        //权重\n        this.weights = option.weights;\n        //值\n        this.value = option.value;\n        //父节点code\n        this.parentCode = option.parentCode;\n        //匹配前的字符\n        this.matchText = option.matchText;\n        //匹配后的字符\n        this.matchedText = option.matchedText;\n        //匹配到的字符\n        this.matchToText = option.matchToText;\n        //当前处理序列\n        this.dealIndex = 0;\n        if (orderRegExp[this.level] instanceof RegExp && this.matchText) {\n            this.matchTexts = option.matchText.split(orderRegExp[this.level]);\n        }\n    }\n\n    _createClass(CityModel, [{\n        key: 'getParentMatchText',\n        value: function getParentMatchText() {\n            return this.parent && this.parent.matchText;\n        }\n    }, {\n        key: 'getChildrenMap',\n        value: function getChildrenMap(type) {\n            var childrenCity = this.getChildren();\n            if (!childrenCity) return false;\n            var arr = [];\n            switch (type) {\n                case 'code':\n                    for (var key in childrenCity) {\n                        if (!childrenCity.hasOwnProperty(key)) continue;\n                        arr.push(key);\n                    }\n                    break;\n                case 'value':\n                    for (var _key in childrenCity) {\n                        if (!childrenCity.hasOwnProperty(_key)) continue;\n                        arr.push(childrenCity[_key]);\n                    }\n                    break;\n                default:\n                    for (var _key2 in childrenCity) {\n                        if (!childrenCity.hasOwnProperty(_key2)) continue;\n                        arr.push([_key2, childrenCity[_key2]]);\n                    }\n                    break;\n            }\n            return arr;\n        }\n    }, {\n        key: 'getChildren',\n        value: function getChildren() {\n            var code = this.code || ROOTCODE;\n            return Library[code];\n        }\n    }, {\n        key: 'getChildrenValues',\n        value: function getChildrenValues() {\n            return this.getChildrenMap('value');\n        }\n    }, {\n        key: 'emitNext',\n        value: function emitNext() {\n            var parent = this.parent;\n            if (parent) {\n                var dealIndex = parent.dealIndex;\n                var length = parent.childrenNode.length;\n                if (dealIndex + 2 > length || length === 0) {\n                    if (parent.weights >= 95 && parent.level >= 0) {\n                        parent.childrenNodeSort();\n                        var child = parent.childrenNode[0];\n                        if (child && child.weights >= 95) {\n                            child.end();\n                        } else {\n                            parent.end();\n                        }\n                        return true;\n                    }\n                    return parent.emitNext();\n                } else {\n                    parent.dealIndex++;\n                    parent.childrenNode[parent.dealIndex].match();\n                }\n            } else {\n                index.emit('splitError', null, this.getTopId());\n            }\n            return false;\n        }\n    }, {\n        key: 'createChildNode',\n        value: function createChildNode(matchToText, weights) {\n            var noMatch = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n            var level = this.level + 1;\n            var parent = this;\n            var parentCode = this.code;\n            var matchToCity = void 0;\n            var fullInfo = this.getFullInfoByValue(matchToText);\n            if (new RegExp(fullInfo.value).test(this.matchText)) {\n                matchToText = fullInfo.value;\n            }\n            var matchTexts = this.matchText.split(matchToText);\n            var matchText = this.matchText;\n            if (matchTexts.length > 1) {\n                matchText = matchTexts.slice(1).join(matchToText);\n            }\n            weights = weights || 0;\n            this.matchedText = matchText;\n            if (noMatch) {\n                matchToText = null;\n            } else if (/^(路|大道)/.test(matchText) || /(路)$/.test(matchToText)) {\n                matchText = matchToText + matchText;\n            }\n            if (fullInfo) {\n                var code = fullInfo.code,\n                    value = fullInfo.value;\n\n                var cityNode = new CityModel({\n                    parentCode: parent.code,\n                    code: code,\n                    weights: weights,\n                    matchToText: matchToText,\n                    matchText: matchText,\n                    level: level,\n                    parent: parent,\n                    value: value\n                });\n                this.childrenNode.push(cityNode);\n                return cityNode;\n            }\n            return false;\n        }\n    }, {\n        key: 'createChildrenNode',\n        value: function createChildrenNode() {\n            var city = this.getChildren();\n            var len = _util2.default.getObjectLength(city);\n            var weights = len === 1 && this.weights || 1;\n            for (var key in city) {\n                if (!city.hasOwnProperty(key)) continue;\n                this.createChildNode(city[key], weights, true);\n            }\n            return true;\n        }\n    }, {\n        key: 'getFullInfoByValue',\n        value: function getFullInfoByValue(value) {\n            var city = this.getChildren();\n            for (var key in city) {\n                if (!city.hasOwnProperty(key)) continue;\n                if (new RegExp(value).test(city[key])) {\n                    return { code: key, value: city[key] };\n                }\n            }\n        }\n    }, {\n        key: 'match',\n        value: function match() {\n            var reg = orderRegExp[this.level];\n            var matchText = this.matchText;\n            if (!matchText) return this.end();\n            var code = this.code;\n            var parent = this.parent;\n            var childrenValues = this.getChildrenValues();\n            if (childrenValues) {\n                var libraryStr = childrenValues.join(\",\");\n                if (reg) {\n                    libraryStr = libraryStr.replace(reg, '');\n                }\n                var _library = libraryStr.split(',');\n                var result = [];\n                if (_library.length === 1) {\n                    this.createChildNode(_library[0], this.weights, true);\n                } else if (_library.length === 0) {\n                    return this.end();\n                } else {\n                    for (var i = 0; i < _library.length; i++) {\n                        if (new RegExp(_library[i]).test(matchText) && matchText.indexOf(_library[i]) <= 5) {\n                            var _index = matchText.indexOf(_library[i]);\n                            var weights = 100 - _index;\n                            var currentNode = this.createChildNode(_library[i], weights);\n                            if (currentNode) {\n                                currentNode.weightsAdd();\n                            }\n                        } else if (parent && new RegExp(_library[i]).test(parent.matchText)) {\n                            this.matchText = this.parent.matchText;\n                            var _index2 = parent.matchText.indexOf(_library[i]);\n                            var _weights = 50 - _index2;\n                            var _currentNode = this.createChildNode(_library[i], _weights);\n                            if (_currentNode) {\n                                _currentNode.weightsAdd();\n                            }\n                        } else {\n                            this.createChildNode(_library[i], 1, true);\n                        }\n                    }\n                }\n                this.childrenNodeSort();\n                var childrenNode = this.childrenNode[0];\n                if (childrenNode && childrenNode.weights <= 1 && this.weights <= 1) {\n                    this.close();\n                    this.emitNext();\n                } else {\n                    this.childrenNode[0].match();\n                }\n            } else if (typeof this.getChildren() === 'undefined') {\n                if (this.level >= stopLevel || index.emit('noChildren', this, this.getTopId()) === 0) {\n                    if (this.weights <= 95) {\n                        this.close();\n                        this.emitNext();\n                    } else {\n                        this.end();\n                    }\n                }\n            } else {\n                this.emitNext();\n            }\n        }\n    }, {\n        key: 'childrenNodeSort',\n        value: function childrenNodeSort() {\n            var children = this.childrenNode;\n            if (children.length > 1) {\n                children.sort(function (a, b) {\n                    if (!b) {\n                        return -1;\n                    }\n                    if (!a) {\n                        return 1;\n                    }\n                    if (a.weights > b.weights) {\n                        return -1;\n                    }\n                    return 1;\n                });\n            }\n        }\n    }, {\n        key: 'close',\n        value: function close() {\n            var parent = this.parent;\n            if (parent) {\n                for (var i = 0; i < parent.childrenNode.length; i++) {\n                    if (parent.childrenNode[i] === this) {\n                        parent.childrenNode[i] = null;\n                        break;\n                    }\n                }\n            }\n        }\n    }, {\n        key: 'getLastChild',\n        value: function getLastChild() {\n            var children = this.getChildrenNode();\n            if (children.length === 0) return null;\n            return children[children.length - 1];\n        }\n    }, {\n        key: 'getChildrenNode',\n        value: function getChildrenNode() {\n            var current = this;\n            var children = [];\n            while (current.childrenNode.length > 0) {\n                var childrenNode = current.childrenNode[current.dealIndex];\n                if (!childrenNode) break;\n                current = childrenNode;\n                children.push(current);\n            }\n            return children;\n        }\n    }, {\n        key: 'getTopParent',\n        value: function getTopParent() {\n            var parent = this;\n            while (parent.parent) {\n                parent = parent.parent;\n            }\n            return parent;\n        }\n    }, {\n        key: 'end',\n        value: function end() {\n            var parent = this.getTopParent();\n            var childrenNode = parent.getChildrenNode();\n            var arr = [];\n            childrenNode.forEach(function (value) {\n                if (value) {\n                    arr.push(value.value);\n                }\n            });\n            if (childrenNode.length > 0) {\n                arr.push(childrenNode[childrenNode.length - 1].matchText);\n            }\n            parent.complete = true;\n            parent.result = arr;\n            index.emit('splitSuccess', arr, parent.id);\n        }\n    }, {\n        key: 'getTopId',\n        value: function getTopId() {\n            var parent = this;\n            while (parent.parent) {\n                parent = parent.parent;\n            }\n            return parent.id;\n        }\n    }, {\n        key: 'getParentsWeights',\n        value: function getParentsWeights() {\n            var parent = this;\n            var weights = parent.weights || 0;\n            while (parent.parent) {\n                parent = parent.parent;\n                weights += parent.weights || 0;\n            }\n            return weights;\n        }\n    }, {\n        key: 'weightsAdd',\n        value: function weightsAdd() {\n            var parent = this.parent;\n            while (parent) {\n                parent.weights += 50;\n                parent = parent.parent;\n            }\n            return this;\n        }\n    }]);\n\n    return CityModel;\n}();\n\nvar index = exports.index = function (_Dispatcher) {\n    _inherits(index, _Dispatcher);\n\n    function index(matchText) {\n        _classCallCheck(this, index);\n\n        var id = _util2.default.getId();\n\n        var _this = _possibleConstructorReturn(this, (index.__proto__ || Object.getPrototypeOf(index)).call(this, { id: id }));\n\n        _this.allowJumpInterval = 2;\n\n        _this.matchText = index.filterControlChar(matchText);\n        _this.matchText = _this.matchText.replace(/[\\r\\n]/g, ' ');\n        _this.level = 0;\n        _this.id = id;\n        _this.tree = _this.createRoot();\n        _this.tree.id = id;\n        return _this;\n    }\n\n    _createClass(index, [{\n        key: 'setAllowJumpInterval',\n        value: function setAllowJumpInterval(num) {\n            if (isNaN(num)) {\n                return false;\n            }\n            this.allowJumpInterval = num;\n        }\n    }, {\n        key: 'createRoot',\n        value: function createRoot() {\n            var root = {\n                parentCode: null,\n                level: 0,\n                code: ROOTCODE,\n                matchText: this.matchText,\n                weights: 100\n            };\n            return new CityModel(root);\n        }\n    }, {\n        key: 'start',\n        value: function start(callback) {\n            var _this2 = this;\n\n            if (callback) {\n                this.on('splitSuccess', callback, true);\n            }\n            return new Promise(function (resolve, reject) {\n                _this2.on('splitSuccess', resolve, true);\n                _this2.on('splitError', reject, true);\n                _this2.tree.match();\n            });\n        }\n    }, {\n        key: 'getTree',\n        value: function getTree() {\n            return this.tree;\n        }\n    }, {\n        key: 'getMatchToTexts',\n        value: function getMatchToTexts() {\n            var childrenNodes = this.tree.getChildrenNode();\n            var arr = [];\n            childrenNodes.forEach(function (val) {\n                if (val.matchToText) {\n                    arr.push(val.matchToText);\n                }\n            });\n            if (childrenNodes.length > 0) {\n                arr.push(childrenNodes[childrenNodes.length - 1].matchText);\n            }\n            return arr;\n        }\n    }, {\n        key: 'splitInfomation',\n        value: function splitInfomation(callback) {\n            var _this3 = this;\n\n            if (callback) {\n                this.on('splitInfomationSuccess', callback, true);\n            }\n            return new Promise(function (resolve, reject) {\n                _this3.on('splitInfomationSuccess', resolve, true);\n                _this3.on('splitInfomationError', reject, true);\n                if (_this3.tree.complete) {\n                    return _this3.startSplitInfomation();\n                }\n                _this3.start().then(function (val) {\n                    var result = _this3.startSplitInfomation();\n                    _this3.emit(result && 'splitInfomationSuccess' || 'splitInfomationError', result, true);\n                });\n            });\n        }\n    }, {\n        key: 'matchPhone',\n        value: function matchPhone(txt, _address) {\n            txt = String(txt);\n            _address = String(_address);\n            var prevExpReg = '([\\\\s,，、]*)?(手机|联系方式|电话|联系人)?号?(号码)?(、|:|：|\\\\s)?'; //(\\d{11}|(\\d|-|转){8,30})\n            var mobilePhoneExpReg = '(([(（]?\\\\+86[)）]?)?1\\\\d{2}[ \\\\-]?\\\\d{4}[ \\\\-]?\\\\d{4})';\n            var mobilePhoneFullExpReg = prevExpReg + mobilePhoneExpReg;\n            var mobilePhone = txt.match(new RegExp(mobilePhoneFullExpReg, 'g'));\n            var trimSpace = /[^\\d]/g;\n            var data = {};\n            if (mobilePhone) {\n                txt = txt.replace(new RegExp(mobilePhoneFullExpReg, 'g'), ' ');\n                _address = _address.replace(new RegExp(mobilePhoneFullExpReg, 'g'), ' ');\n                data.mobilePhone = mobilePhone[0].match(new RegExp(mobilePhoneExpReg))[0].replace(trimSpace, '');\n                if (mobilePhone[1]) {\n                    data.phone = mobilePhone[1].match(new RegExp(mobilePhoneExpReg))[0].replace(trimSpace, '') + ' ';\n                }\n            }\n            var phoneExpReg = '(\\\\d|([\\\\-转()（） ]{0,2}\\\\d){1}){8,30}';\n            var phoneFullExpReg = prevExpReg + phoneExpReg;\n            var phone = txt.match(new RegExp(phoneFullExpReg, 'g'));\n            if (phone) {\n                txt = txt.replace(new RegExp(phoneFullExpReg, 'g'), ' ');\n                _address = _address.replace(new RegExp(phoneFullExpReg, 'g'), ' ');\n                data.phone = (data.phone || '') + phone[0].match(new RegExp(phoneExpReg))[0];\n                if (phone[1]) {\n                    data.phone += phone[1].match(new RegExp(phoneExpReg))[0];\n                }\n            }\n            return [data.mobilePhone, data.phone, txt, _address];\n        }\n    }, {\n        key: 'startSplitInfomation',\n        value: function startSplitInfomation(txt) {\n            txt = txt || this.matchText;\n            var matchToTexts = this.getMatchToTexts();\n            var first = void 0,\n                last = void 0;\n            if (matchToTexts.length > 1) {\n                first = txt.match(new RegExp('.*?(?=' + matchToTexts[0] + ')'));\n                last = matchToTexts[matchToTexts.length - 1]; //txt.match(new RegExp('(?<='+matchToTexts[matchToTexts.length-1]+').*$'));\n            } else {\n                first = txt;\n                last = '';\n            }\n            var merge = ' ' + first + \" $$$$ \" + last + ' ';\n            var address = [].concat(_toConsumableArray(this.tree.result));\n            var _address = address[address.length - 1];\n            var mobilePhone = void 0,\n                phone = void 0;\n\n            var _matchPhone = this.matchPhone(merge, _address);\n\n            var _matchPhone2 = _slicedToArray(_matchPhone, 4);\n\n            mobilePhone = _matchPhone2[0];\n            phone = _matchPhone2[1];\n            merge = _matchPhone2[2];\n            _address = _matchPhone2[3];\n\n            var personExp = /(([^\\u4e00-\\u9fa5]*)?(姓名|名字|([收发][件货]人)|联系人)[:：\\s]*)|([^a-zA-Z0-9\\u4e00-\\u9fa5()\\-（）]*$)/g;\n            var personMatchExps = /[^\\u4e00-\\u9fa5](姓名|名字|([收发][件货]人)|联系人)[:：\\s]*[a-zA-Z0-9\\u4e00-\\u9fa5()\\-（）]{1,15}[^a-zA-Z0-9\\u4e00-\\u9fa5()\\-（）]*/g;\n            var personLastExp = /[\\s,，、][^\\s,，、]{2,15}[（(]收[)）]/g;\n            var splitSpace = /[^a-zA-Z0-9\\u4e00-\\u9fa5]+/g;\n            var person = merge.match(personMatchExps);\n\n            if (person) {\n                person = person[0].replace(personExp, '');\n            } else {\n                person = merge.match(personLastExp);\n                if (person) {\n                    person = person[0].replace(personExp, '');\n                }\n            }\n            if (!person) {\n                var mayPerson = [];\n                var merges = merge.split(\"$$$$\");\n                first = merges[0];\n                last = merges[1];\n                if (first) {\n                    mayPerson = mayPerson.concat(first.split(splitSpace));\n                }\n                if (last) {\n                    var persons = index.trimArray(last.split(splitSpace));\n                    if (persons.length > 0 && !/谢谢/.test(persons[persons.length - 1])) {\n                        persons = persons.reverse();\n                    }\n                    mayPerson = mayPerson.concat(persons);\n                }\n                for (var i = 0; i < mayPerson.length; i++) {\n                    var name = mayPerson[i].replace(personExp, '');\n                    if (name && !/地址|[0-9a-zA-Z][楼号栋斤室]|电话|手机|号码|联系人/.test(name) && (/(^[王李张刘陈杨黄赵周吴徐孙马朱胡林郭何高罗郑梁宋唐许邓冯韩曹])|(先生|女士|[^拒]收)$/.test(name) || name.length <= 15)) {\n                        person = name;\n                        break;\n                    }\n                }\n            }\n            _address.replace(/[\\s,，、]{2,}/, '');\n            address[address.length - 1] = _address;\n            person = person || '';\n            person = person.replace(/^\\s*|\\s*$/g, '');\n            return { mobilePhone: mobilePhone, phone: phone, person: person, address: address };\n        }\n    }], [{\n        key: 'setRootId',\n        value: function setRootId(id) {\n            if (!id) return false;\n            ROOTCODE = String(id);\n        }\n    }, {\n        key: 'setLibrary',\n        value: function setLibrary(library) {\n            Library = library;\n        }\n    }, {\n        key: 'setStopLevel',\n        value: function setStopLevel(level) {\n            stopLevel = level;\n        }\n    }, {\n        key: 'setAllowJumpInterval',\n        value: function setAllowJumpInterval(num) {\n            if (isNaN(num)) {\n                return false;\n            }\n            index.prototype.allowJumpInterval = num;\n        }\n    }, {\n        key: 'filterControlChar',\n        value: function filterControlChar(txt) {\n            txt = String(txt);\n            var controlChars = [30, 31, 8204, 8205, 8206, 8207, 8234, 8236, 8237, 8238, 8298, 8299, 8300, 8301, 8302, 8303];\n            controlChars.forEach(function (val) {\n                var _t = val.toString(16);\n                _t = new Array(5 - _t.length).join('0') + _t;\n                txt = txt.replace(new RegExp('\\\\u' + _t, 'g'), '');\n            });\n            return txt;\n        }\n    }, {\n        key: 'trimArray',\n        value: function trimArray(arr) {\n            var newArr = [];\n            if (_util2.default.isArray(arr)) {\n                for (var i = 0; i < arr.length; i++) {\n                    if (arr[i]) {\n                        newArr.push(arr[i]);\n                    }\n                }\n            }\n            return newArr;\n        }\n    }]);\n\n    return index;\n}(Dispatcher);//# sourceMappingURL=data:application/json;charset=utf-8;base64,");
},108:function(module,exports){eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/**\n * 自增ID\n * @type {number}\n */\nvar id = 0;\nexports.default = {\n    /**\n     * 检测参数类型是否为数组\n     * @param a {*}\n     * @return {boolean}\n     */\n    isArray: function isArray(a) {\n        return Object.prototype.toString.call(a) === '[object Array]';\n    },\n    /**\n     * 检测参数类型是否为原生对象\n     * @param a\n     * @return {boolean}\n     */\n    isObject: function isObject(a) {\n        return Object.prototype.toString.call(a) === '[object Object]';\n    },\n    /**\n     * 检测参数类型是否为函数\n     * @param a\n     * @return {boolean}\n     */\n    isFunction: function isFunction(a) {\n        return Object.prototype.toString.call(a) === '[object Function]';\n    },\n    /**\n     * 检查是否包含在数组中\n     * @param val {*}\n     * @param array {Array}\n     * @return {number} -1为没有，其他为有\n     */\n    inArray: function inArray(val, array) {\n        for (var i = 0; i < array.length; i++) {\n            if (array[i] === val) {\n                return i;\n            }\n        }\n        return -1;\n    },\n    inArrayTwo: function inArrayTwo(val, array, type) {\n        type = type || 'id';\n        for (var i = 0; i < array.length; i++) {\n            if (array[i][type] === val) {\n                return i;\n            }\n        }\n        return -1;\n    },\n    extend: function extend(target) {\n        var _this = this;\n\n        for (var _len = arguments.length, parms = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n            parms[_key - 1] = arguments[_key];\n        }\n\n        parms.forEach(function (val) {\n            for (var key in val) {\n                if (!val.hasOwnProperty(key)) continue;\n                if (!_this.isObject(val[key]) && !_this.isArray(val[key])) {\n                    target[key] = val[key];\n                } else {\n                    target[key] = target[key] || {};\n                    _this.extend(target[key], val[key]);\n                }\n            }\n        });\n        return target;\n    },\n    /**\n     * 可选参数 传如字符串可以生成带前缀的唯一ID\n     * @return {string}\n     */\n    getId: function getId(p) {\n        id++;\n        return typeof p === 'string' && p + id || String(id);\n    },\n    getObjectLength: function getObjectLength(data) {\n        var length = 0;\n        for (var key in data) {\n            if (!data.hasOwnProperty(key)) continue;\n            length++;\n        }\n        return length;\n    }\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9hZGRyZXNzU3BsaXQvdXRpbC5qcz85YjE3Il0sIm5hbWVzIjpbImlkIiwiaXNBcnJheSIsImEiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsImNhbGwiLCJpc09iamVjdCIsImlzRnVuY3Rpb24iLCJpbkFycmF5IiwidmFsIiwiYXJyYXkiLCJpIiwibGVuZ3RoIiwiaW5BcnJheVR3byIsInR5cGUiLCJleHRlbmQiLCJ0YXJnZXQiLCJwYXJtcyIsImZvckVhY2giLCJrZXkiLCJoYXNPd25Qcm9wZXJ0eSIsImdldElkIiwicCIsIlN0cmluZyIsImdldE9iamVjdExlbmd0aCIsImRhdGEiXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7Ozs7QUFJQSxJQUFJQSxLQUFHLENBQVA7a0JBQ2U7QUFDWDs7Ozs7QUFLQUMsYUFBUyxpQkFBQ0MsQ0FBRCxFQUFPO0FBQ1osZUFBT0MsT0FBT0MsU0FBUCxDQUFpQkMsUUFBakIsQ0FBMEJDLElBQTFCLENBQStCSixDQUEvQixNQUFzQyxnQkFBN0M7QUFDSCxLQVJVO0FBU1g7Ozs7O0FBS0FLLGNBQVUsa0JBQUNMLENBQUQsRUFBTztBQUNiLGVBQU9DLE9BQU9DLFNBQVAsQ0FBaUJDLFFBQWpCLENBQTBCQyxJQUExQixDQUErQkosQ0FBL0IsTUFBc0MsaUJBQTdDO0FBQ0gsS0FoQlU7QUFpQlg7Ozs7O0FBS0FNLGdCQUFZLG9CQUFDTixDQUFELEVBQU87QUFDZixlQUFPQyxPQUFPQyxTQUFQLENBQWlCQyxRQUFqQixDQUEwQkMsSUFBMUIsQ0FBK0JKLENBQS9CLE1BQXNDLG1CQUE3QztBQUNILEtBeEJVO0FBeUJYOzs7Ozs7QUFNQU8sYUFBUyxpQkFBQ0MsR0FBRCxFQUFNQyxLQUFOLEVBQWdCO0FBQ3JCLGFBQUssSUFBSUMsSUFBSSxDQUFiLEVBQWdCQSxJQUFJRCxNQUFNRSxNQUExQixFQUFrQ0QsR0FBbEMsRUFBdUM7QUFDbkMsZ0JBQUlELE1BQU1DLENBQU4sTUFBYUYsR0FBakIsRUFBc0I7QUFDbEIsdUJBQU9FLENBQVA7QUFDSDtBQUNKO0FBQ0QsZUFBTyxDQUFDLENBQVI7QUFDSCxLQXRDVTtBQXVDWEUsZ0JBQVksb0JBQUNKLEdBQUQsRUFBTUMsS0FBTixFQUFhSSxJQUFiLEVBQXNCO0FBQzlCQSxlQUFPQSxRQUFRLElBQWY7QUFDQSxhQUFLLElBQUlILElBQUksQ0FBYixFQUFnQkEsSUFBSUQsTUFBTUUsTUFBMUIsRUFBa0NELEdBQWxDLEVBQXVDO0FBQ25DLGdCQUFJRCxNQUFNQyxDQUFOLEVBQVNHLElBQVQsTUFBbUJMLEdBQXZCLEVBQTRCO0FBQ3hCLHVCQUFPRSxDQUFQO0FBQ0g7QUFDSjtBQUNELGVBQU8sQ0FBQyxDQUFSO0FBQ0gsS0EvQ1U7QUFnRFhJLFlBQVEsZ0JBQVVDLE1BQVYsRUFBNEI7QUFBQTs7QUFBQSwwQ0FBUEMsS0FBTztBQUFQQSxpQkFBTztBQUFBOztBQUNoQ0EsY0FBTUMsT0FBTixDQUFjLGVBQU87QUFDakIsaUJBQUssSUFBSUMsR0FBVCxJQUFnQlYsR0FBaEIsRUFBcUI7QUFDakIsb0JBQUksQ0FBQ0EsSUFBSVcsY0FBSixDQUFtQkQsR0FBbkIsQ0FBTCxFQUE4QjtBQUM5QixvQkFBSSxDQUFDLE1BQUtiLFFBQUwsQ0FBY0csSUFBSVUsR0FBSixDQUFkLENBQUQsSUFBNEIsQ0FBQyxNQUFLbkIsT0FBTCxDQUFhUyxJQUFJVSxHQUFKLENBQWIsQ0FBakMsRUFBeUQ7QUFDckRILDJCQUFPRyxHQUFQLElBQWNWLElBQUlVLEdBQUosQ0FBZDtBQUNILGlCQUZELE1BRU87QUFDSEgsMkJBQU9HLEdBQVAsSUFBY0gsT0FBT0csR0FBUCxLQUFlLEVBQTdCO0FBQ0EsMEJBQUtKLE1BQUwsQ0FBWUMsT0FBT0csR0FBUCxDQUFaLEVBQXlCVixJQUFJVSxHQUFKLENBQXpCO0FBQ0g7QUFDSjtBQUNKLFNBVkQ7QUFXQSxlQUFPSCxNQUFQO0FBQ0gsS0E3RFU7QUE4RFg7Ozs7QUFJQUssV0FBTyxlQUFDQyxDQUFELEVBQUs7QUFDUnZCO0FBQ0EsZUFBTyxPQUFPdUIsQ0FBUCxLQUFXLFFBQVgsSUFBc0JBLElBQUV2QixFQUF4QixJQUE2QndCLE9BQU94QixFQUFQLENBQXBDO0FBQ0gsS0FyRVU7QUFzRVh5QixxQkFBaUIsK0JBQVE7QUFDckIsWUFBSVosU0FBTyxDQUFYO0FBQ0EsYUFBSSxJQUFJTyxHQUFSLElBQWVNLElBQWYsRUFBb0I7QUFDaEIsZ0JBQUksQ0FBQ0EsS0FBS0wsY0FBTCxDQUFvQkQsR0FBcEIsQ0FBTCxFQUErQjtBQUMvQlA7QUFDSDtBQUNELGVBQU9BLE1BQVA7QUFDSDtBQTdFVSxDIiwiZmlsZSI6IjEwOC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICog6Ieq5aKeSURcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKi9cbmxldCBpZD0wO1xuZXhwb3J0IGRlZmF1bHQge1xuICAgIC8qKlxuICAgICAqIOajgOa1i+WPguaVsOexu+Wei+aYr+WQpuS4uuaVsOe7hFxuICAgICAqIEBwYXJhbSBhIHsqfVxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAgICovXG4gICAgaXNBcnJheTogKGEpID0+IHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhKSA9PT0gJ1tvYmplY3QgQXJyYXldJ1xuICAgIH0sXG4gICAgLyoqXG4gICAgICog5qOA5rWL5Y+C5pWw57G75Z6L5piv5ZCm5Li65Y6f55Sf5a+56LGhXG4gICAgICogQHBhcmFtIGFcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgICAqL1xuICAgIGlzT2JqZWN0OiAoYSkgPT4ge1xuICAgICAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGEpID09PSAnW29iamVjdCBPYmplY3RdJ1xuICAgIH0sXG4gICAgLyoqXG4gICAgICog5qOA5rWL5Y+C5pWw57G75Z6L5piv5ZCm5Li65Ye95pWwXG4gICAgICogQHBhcmFtIGFcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgICAqL1xuICAgIGlzRnVuY3Rpb246IChhKSA9PiB7XG4gICAgICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYSkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSdcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIOajgOafpeaYr+WQpuWMheWQq+WcqOaVsOe7hOS4rVxuICAgICAqIEBwYXJhbSB2YWwgeyp9XG4gICAgICogQHBhcmFtIGFycmF5IHtBcnJheX1cbiAgICAgKiBAcmV0dXJuIHtudW1iZXJ9IC0x5Li65rKh5pyJ77yM5YW25LuW5Li65pyJXG4gICAgICovXG4gICAgaW5BcnJheTogKHZhbCwgYXJyYXkpID0+IHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKGFycmF5W2ldID09PSB2YWwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9LFxuICAgIGluQXJyYXlUd286ICh2YWwsIGFycmF5LCB0eXBlKSA9PiB7XG4gICAgICAgIHR5cGUgPSB0eXBlIHx8ICdpZCc7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChhcnJheVtpXVt0eXBlXSA9PT0gdmFsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gLTE7XG4gICAgfSxcbiAgICBleHRlbmQ6IGZ1bmN0aW9uICh0YXJnZXQsIC4uLnBhcm1zKSB7XG4gICAgICAgIHBhcm1zLmZvckVhY2godmFsID0+IHtcbiAgICAgICAgICAgIGZvciAobGV0IGtleSBpbiB2YWwpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXZhbC5oYXNPd25Qcm9wZXJ0eShrZXkpKSBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaXNPYmplY3QodmFsW2tleV0pICYmICF0aGlzLmlzQXJyYXkodmFsW2tleV0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldFtrZXldID0gdmFsW2tleV1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRba2V5XSA9IHRhcmdldFtrZXldIHx8IHt9O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmV4dGVuZCh0YXJnZXRba2V5XSwgdmFsW2tleV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0YXJnZXRcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIOWPr+mAieWPguaVsCDkvKDlpoLlrZfnrKbkuLLlj6/ku6XnlJ/miJDluKbliY3nvIDnmoTllK/kuIBJRFxuICAgICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICAgKi9cbiAgICBnZXRJZDogKHApPT57XG4gICAgICAgIGlkKys7XG4gICAgICAgIHJldHVybiB0eXBlb2YgcD09PSdzdHJpbmcnJiYocCtpZCl8fFN0cmluZyhpZCk7XG4gICAgfSxcbiAgICBnZXRPYmplY3RMZW5ndGg6IGRhdGEgPT4ge1xuICAgICAgICBsZXQgbGVuZ3RoPTA7XG4gICAgICAgIGZvcihsZXQga2V5IGluIGRhdGEpe1xuICAgICAgICAgICAgaWYgKCFkYXRhLmhhc093blByb3BlcnR5KGtleSkpIGNvbnRpbnVlO1xuICAgICAgICAgICAgbGVuZ3RoKys7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGxlbmd0aFxuICAgIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9jb21wb25lbnRzL2FkZHJlc3NTcGxpdC91dGlsLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==")}})});